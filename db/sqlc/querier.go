// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
)

type Querier interface {
	AddContract(ctx context.Context, arg AddContractParams) (Contract, error)
	AddEmail(ctx context.Context, arg AddEmailParams) (Email, error)
	AddToken(ctx context.Context, arg AddTokenParams) (TokensContract, error)
	DeleteContract(ctx context.Context, id int64) error
	DeleteEmail(ctx context.Context, id int64) error
	DeleteToken(ctx context.Context, id int64) error
	GetContract(ctx context.Context, id int64) (Contract, error)
	GetContractByAddress(ctx context.Context, lower string) (Contract, error)
	GetEmail(ctx context.Context, id int64) (Email, error)
	GetEmailForContract(ctx context.Context, contractID int64) ([]EmailsContract, error)
	ListContracts(ctx context.Context, arg ListContractsParams) ([]Contract, error)
	ListEmails(ctx context.Context, arg ListEmailsParams) ([]Email, error)
	ListEmailsSubscription(ctx context.Context, contractid int64) ([]Email, error)
	ListEmailsSubscriptionByAddress(ctx context.Context, contractaddress string) ([]Email, error)
	ListTokensInContract(ctx context.Context, arg ListTokensInContractParams) ([]TokensContract, error)
	MapEmailContract(ctx context.Context, arg MapEmailContractParams) (MapEmailContractRow, error)
	// -- name: ListTokensInContractByAddress :many
	// SELECT *
	// FROM tokens_contract
	// WHERE contract_id = $3
	// LIMIT $1 OFFSET $2;
	UpdateContract(ctx context.Context, arg UpdateContractParams) (Contract, error)
	UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Email, error)
}

var _ Querier = (*Queries)(nil)
